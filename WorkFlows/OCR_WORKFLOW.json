{
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "DOC_ID"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1744,
        128
      ],
      "id": "6e03c889-baa8-47e8-b819-5ffe2aa881ec",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.DOC_ID }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1456,
        128
      ],
      "id": "5830837d-5d87-40a9-9578-c3f4d3b3572f",
      "name": "DOWNLOAD THE CURRENT DOC 1",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "BaCkgQEh4aOXF4Og",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer $MISTRAL_API_KEY"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1056,
        128
      ],
      "id": "c67974bc-86f1-4a59-9867-2419bb1cff14",
      "name": "UPLOAD FILE TO MISTERAL ",
      "credentials": {
        "mistralCloudApi": {
          "id": "qJ5ZS3tpSub7Rfy7",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{$json.id}}/url",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "24"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer $MISTRAL_API_KEY"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -848,
        128
      ],
      "id": "880829df-b2d8-4e56-bd5f-428b22854552",
      "name": "GET SIGNED URL ",
      "credentials": {
        "mistralCloudApi": {
          "id": "qJ5ZS3tpSub7Rfy7",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"document_url\": \"{{$json.url}}\"\n  },\n  \"bbox_annotation_format\": {\n    \"type\": \"json_schema\",\n    \"json_schema\": {\n      \"schema\": {\n        \"properties\": {\n          \"document_type\": {\n            \"title\": \"Document_Type\",\n            \"type\": \"string\"\n          },\n          \"short_description\": {\n            \"title\": \"Short_Description\",\n            \"type\": \"string\"\n          },\n          \"summary\": {\n            \"title\": \"Summary\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"document_type\",\n          \"short_description\",\n          \"summary\"\n        ],\n        \"title\": \"BBOXAnnotation\",\n        \"type\": \"object\",\n        \"additionalProperties\": false\n      },\n      \"name\": \"document_annotation\",\n      \"strict\": true\n    }\n  },\n  \"include_image_base64\": true\n} ",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -640,
        128
      ],
      "id": "4cc267e1-a987-4501-8ac7-cbb5160e179d",
      "name": "HTTP Request",
      "credentials": {
        "httpBearerAuth": {
          "id": "9t4XntvFXi4Cvm0w",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3f40f45f-855d-4e9f-ab4b-cf9cbd4e8b0b",
              "name": "image_base64",
              "value": "={{ $('IMAGES').item.json.image_base64.replace(/^data:image\\/[^;]+;base64,/, '') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2464,
        240
      ],
      "id": "988cbccd-a2b9-4feb-aca5-b4e03497e27f",
      "name": "GET THE IMAGE BASE 64 PART"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "image_base64",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('GET SUPABASE STORAGE FILE TITLE').item.json.image_title }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2768,
        384
      ],
      "id": "b69df18e-09b7-4773-8f30-34a0a97e871a",
      "name": "CONVERT TO BINARY ",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "fieldToSplitOut": "pages",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -288,
        128
      ],
      "id": "378803b8-592d-4882-8446-b720b5bf0c61",
      "name": "EXTRACT THE PAGES 1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "75284a13-4a75-4c64-823b-e1a96cfa5341",
              "name": "image_title",
              "value": "={{ $json.text.replace(/['\"àáâãäåæçèéêëìíîïñòóôõöøùúûüýÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØÙÚÛÜÝ]/g, function(match) {\n  const map = {\n    'à': 'a', 'á': 'a', 'â': 'a', 'ã': 'a', 'ä': 'a', 'å': 'a', 'æ': 'ae',\n    'ç': 'c', 'è': 'e', 'é': 'e', 'ê': 'e', 'ë': 'e',\n    'ì': 'i', 'í': 'i', 'î': 'i', 'ï': 'i', 'ñ': 'n',\n    'ò': 'o', 'ó': 'o', 'ô': 'o', 'õ': 'o', 'ö': 'o', 'ø': 'o',\n    'ù': 'u', 'ú': 'u', 'û': 'u', 'ü': 'u', 'ý': 'y',\n    'À': 'A', 'Á': 'A', 'Â': 'A', 'Ã': 'A', 'Ä': 'A', 'Å': 'A', 'Æ': 'AE',\n    'Ç': 'C', 'È': 'E', 'É': 'E', 'Ê': 'E', 'Ë': 'E',\n    'Ì': 'I', 'Í': 'I', 'Î': 'I', 'Ï': 'I', 'Ñ': 'N',\n    'Ò': 'O', 'Ó': 'O', 'Ô': 'O', 'Õ': 'O', 'Ö': 'O', 'Ø': 'O',\n    'Ù': 'U', 'Ú': 'U', 'Û': 'U', 'Ü': 'U', 'Ý': 'Y',\n    \"'\": '', '\"': ''\n  };\n  return map[match] || '';\n}).replace(/\\s+/g, '_').replace(/[^a-zA-Z0-9._-]/g, '') }}_{{ (new Date()).toISOString().replace(/[:.]/g, '-') }}",
              "type": "string"
            },
            {
              "id": "a3cd71c3-70b5-4cc8-9a76-cfdfbc2e07f7",
              "name": "id",
              "value": "={{ $('IMAGES').item.json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2016,
        240
      ],
      "id": "909149a0-1308-43af-94d5-514f63c44cf2",
      "name": "GET SUPABASE STORAGE FILE TITLE"
    },
    {
      "parameters": {
        "method": "=POST",
        "url": "=https://nzvbgbkgoudkimnwetiz.supabase.co/storage/v1/object/multi-rag/{{ $binary.data.fileName}}\n",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3104,
        384
      ],
      "id": "2bf6dda9-31d8-4385-a6df-d33644630ddf",
      "name": "SAVE ALL THE  IMAGES IN SUPABASE  BUCKET STORAGE",
      "retryOnFail": true,
      "credentials": {
        "supabaseApi": {
          "id": "3cRXAQK1eN8QzIzJ",
          "name": "LOCAL SUPABASE V"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9dc56ccc-7084-49a4-ba4d-4f32d109181a",
              "name": "title",
              "value": "={{ $('GET SUPABASE STORAGE FILE TITLE').item.json.image_title }} ",
              "type": "string"
            },
            {
              "id": "69516275-4334-49ac-a6ae-c535a043f992",
              "name": "id",
              "value": "={{ $('GET SUPABASE STORAGE FILE TITLE').item.json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3472,
        384
      ],
      "id": "2e85aeac-1d74-45e4-9918-27fd0e6cc5bb",
      "name": "EXTRACT TITLE"
    },
    {
      "parameters": {
        "content": "##  SET MISTRAL OCR FILES \n",
        "height": 320,
        "width": 704
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1216,
        32
      ],
      "typeVersion": 1,
      "id": "524553c9-2d63-4d66-899f-9510b482873b",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# image  annotations  :\n {{ $json.image_annotation }}",
        "messages": {
          "messageValues": [
            {
              "message": "Based solely on the image annotation, respond with just the file name (no file extension, no title formatting, no extra text)."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1440,
        240
      ],
      "id": "24ec6ae0-a9b4-43ea-9c7b-de3f3c5d634c",
      "name": "Basic LLM Chain2"
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "id",
              "field2": "id"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        4048,
        496
      ],
      "id": "828e439b-3215-41c8-983f-04b3524b8e86",
      "name": "Merge2"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// n8n Code Node - Enhanced Image Processing with Supabase URLs and Rich Context\nconst SUPABASE_BASE_URL = 'https://nzvbgbkgoudkimnwetiz.supabase.co/storage/v1/object/public/multi-rag';\n\n// Clean filename for URL while preserving readability\nfunction cleanFilename(str) {\n  const extMatch = str.match(/\\.(jpeg|jpg|png|gif|webp|bmp)$/i);\n  const ext = extMatch ? '.' + extMatch[1].toLowerCase() : '';\n  const nameWithoutExt = ext ? str.slice(0, -ext.length) : str;\n  \n  return nameWithoutExt\n    .replace(/[^\\w\\s-_.]/g, '') // Remove special chars but keep spaces, hyphens, underscores\n    .replace(/\\s+/g, ' ')       // Multiple spaces to single space\n    .trim()\n    + ext;\n}\n\n// Generate rich annotation block for LLM context\nfunction generateAnnotationBlock(meta, imageId) {\n  const title = meta.title || 'Untitled Image';\n  const desc = meta.annotation?.short_description || 'No description available';\n  const summary = meta.annotation?.summary || 'No detailed summary available';\n  \n  return `\n\n---\n**Image Context:**\n- **Title:** ${title}\n- **Description:** ${desc}\n- **Summary:** ${summary}\n- **Image ID:** ${imageId}\n---\n\n`;\n}\n\ntry {\n  const item = $input.item;\n  const data = item.json || item;\n  const inputArray = Array.isArray(data) ? data : [data];\n\n  // Step 1: Build comprehensive image metadata map\n  const imageMetadataMap = {};\n\n  inputArray.forEach(doc => {\n    // Handle different possible image source structures\n    const imageSources = [\n      doc[\"UPLOADED IMAGES \"],\n      doc[\"images\"],\n      doc.images\n    ].filter(Boolean);\n\n    imageSources.forEach(imagesSource => {\n      if (Array.isArray(imagesSource)) {\n        imagesSource.forEach(img => {\n          if (!img.id) return;\n\n          const rawTitle = img.title || img.id || 'Unknown-Image';\n          const displayTitle = rawTitle.replace(/\\s*}}\\s*$/, '').trim();\n          const cleanTitleForUrl = cleanFilename(displayTitle);\n\n          let annotation = null;\n          if (img.image_annotation) {\n            try {\n              annotation = typeof img.image_annotation === 'string'\n                ? JSON.parse(img.image_annotation)\n                : img.image_annotation;\n            } catch (e) {\n              console.warn(`Failed to parse annotation for ${img.id}:`, e);\n              annotation = {\n                short_description: displayTitle,\n                summary: 'Annotation parsing failed'\n              };\n            }\n          }\n\n          imageMetadataMap[img.id] = {\n            title: displayTitle,\n            filename: cleanTitleForUrl,\n            annotation: annotation || {\n              short_description: displayTitle,\n              summary: 'No annotation available'\n            }\n          };\n        });\n      }\n    });\n  });\n\n  // Step 2: Process markdown with enhanced image embedding\n  function processMarkdownContent(markdownText) {\n    if (typeof markdownText !== 'string') return markdownText;\n\n    let processedMarkdown = markdownText;\n    const processedImages = new Set();\n\n    // Enhanced regex to capture various image formats\n    const imageRegex = /!\\[([^\\]]*)\\]\\(([^)\\s]+)(?:\\s*[\"']([^\"']*?)[\"'])?\\)/g;\n    const replacements = [];\n\n    let match;\n    while ((match = imageRegex.exec(markdownText)) !== null) {\n      const fullMatch = match[0];\n      const altText = match[1] || '';\n      const originalPath = match[2];\n      const title = match[3] || '';\n\n      // Extract image ID from path\n      const imageId = originalPath.split('/').pop()?.trim();\n      \n      if (!imageId || !imageMetadataMap[imageId] || processedImages.has(imageId)) {\n        continue;\n      }\n\n      const meta = imageMetadataMap[imageId];\n      const supabaseUrl = `${SUPABASE_BASE_URL}/${encodeURIComponent(meta.filename)}`;\n      \n      // Enhance alt text if it's generic or empty\n      const enhancedAltText = (\n        !altText || \n        altText === imageId || \n        ['img-0.jpeg', 'img-1.jpeg', 'img-2.jpeg'].includes(altText.trim())\n      ) ? meta.title : altText;\n\n      // Create enhanced image block with context\n      const annotationBlock = generateAnnotationBlock(meta, imageId);\n      const enhancedImageBlock = `![${enhancedAltText}](${supabaseUrl}${title ? ` \"${title}\"` : ''})${annotationBlock}`;\n\n      replacements.push({\n        original: fullMatch,\n        enhanced: enhancedImageBlock\n      });\n\n      processedImages.add(imageId);\n    }\n\n    // Apply all replacements\n    replacements.forEach(replacement => {\n      processedMarkdown = processedMarkdown.replace(replacement.original, replacement.enhanced);\n    });\n\n    return processedMarkdown;\n  }\n\n  // Step 3: Process the data structure\n  const processedArray = inputArray.map(doc => {\n    const processedDoc = { ...doc };\n\n    // Direct markdown processing\n    if (processedDoc.markdown) {\n      processedDoc.markdown = processMarkdownContent(processedDoc.markdown);\n    }\n\n    // Handle nested structures (PAGES, UPLOADED IMAGES, etc.)\n    const arrayFields = ['PAGES', 'UPLOADED IMAGES ', 'pages', 'content'];\n    \n    arrayFields.forEach(fieldName => {\n      if (Array.isArray(processedDoc[fieldName])) {\n        processedDoc[fieldName] = processedDoc[fieldName].map(item => {\n          if (item.markdown) {\n            return {\n              ...item,\n              markdown: processMarkdownContent(item.markdown)\n            };\n          }\n          return item;\n        });\n      }\n    });\n\n    return processedDoc;\n  });\n\n  // Add processing metadata\n  const result = Array.isArray(data) ? processedArray : processedArray[0];\n  \n  if (typeof result === 'object') {\n    result._imageProcessing = {\n      processedAt: new Date().toISOString(),\n      imagesFound: Object.keys(imageMetadataMap).length,\n      supabaseBaseUrl: SUPABASE_BASE_URL\n    };\n  }\n\n  return { json: result };\n\n} catch (error) {\n  console.error('Enhanced image processing error:', error);\n  console.error('Error details:', {\n    message: error.message,\n    stack: error.stack\n  });\n  \n  return { \n    json: {\n      ...(item.json || item),\n      _processingError: {\n        message: error.message,\n        timestamp: new Date().toISOString()\n      }\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4896,
        224
      ],
      "id": "5e4151d5-9346-47ba-a221-713b2147c517",
      "name": "Code5",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "fieldToSplitOut": "markdown",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        5344,
        224
      ],
      "id": "5998de41-bc0e-4291-b121-697de853f5a8",
      "name": "Split Out3"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and combine all markdown content into one text\nlet combinedText = '';\n\nfor (const item of $input.all()) {\n  if (item.json.markdown) {\n    combinedText += item.json.markdown + '\\n\\n';\n  }\n}\n\n// Remove trailing newlines\ncombinedText = combinedText.trim();\n\nreturn [{ json: { combinedMarkdown: combinedText } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5968,
        48
      ],
      "id": "85f76e4f-0d3f-4b00-aea9-e780f8323a4c",
      "name": "Code6"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cf07d7e-a4f6-4a90-b1ca-64dc10531137",
              "name": "data",
              "value": "={{ $json.combinedMarkdown }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        6320,
        48
      ],
      "id": "af7edf4c-e28f-4abc-afc0-e6d8fdbe4f81",
      "name": "Name Consistency"
    },
    {
      "parameters": {
        "jsCode": "// Get the images array from the input data\nconst images = $input.first().json.images;\n\n// Check if images array exists and is not empty\nconst isEmpty = !images || !Array.isArray(images) || images.length === 0;\n\n// Return the result\nreturn {\n  json: {\n    imagesEmpty: isEmpty,\n    imagesCount: images ? images.length : 0\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        -160
      ],
      "id": "0bfe1d8b-240b-473f-8123-f0f6142cbc26",
      "name": "CHECK IF THERE IS NO IMAGES"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1754b9be-987a-46a7-88d1-c4dd26018532",
              "leftValue": "={{ $json.data[0].imagesEmpty }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        768,
        112
      ],
      "id": "c747fd2f-4303-4cac-9be7-7a888f8c5027",
      "name": "If",
      "alwaysOutputData": false
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        288,
        112
      ],
      "id": "b72fc719-1ee5-4fbe-bcff-99808168350d",
      "name": "Merge"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        496,
        112
      ],
      "id": "84f91b44-da49-4fc6-8959-aabeafafd90d",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "fieldToSplitOut": "images",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        864,
        480
      ],
      "id": "ea313f6e-405d-46b3-b8ae-8f0fc01be4b9",
      "name": "IMAGES"
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "images[0].id",
              "field2": "id"
            }
          ]
        },
        "joinMode": "enrichInput1",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        4544,
        224
      ],
      "id": "1f06c2bf-8695-4e17-be9e-ae787fcd2e8d",
      "name": "Merge1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        608,
        480
      ],
      "id": "32b62779-b470-40da-ba81-ba50946521be",
      "name": "Split Out1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "fieldsToInclude": "markdown",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1456,
        96
      ],
      "id": "b2e13ae0-37f3-4177-a3f4-4494156a35b7",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1072,
        96
      ],
      "id": "aae1059d-8dc7-4aa5-9f38-4d05617aec7c",
      "name": "Split Out",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "fieldToSplitOut": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        5344,
        48
      ],
      "id": "2621e1ab-6a0a-413d-a907-2f5ef7b2f4da",
      "name": "Split Out2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1440,
        496
      ],
      "id": "4dc68c9a-aa4d-4eef-9de1-d994f52d2741",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "3YBplxts6vfr4Rs0",
          "name": "OpenRouter account"
        }
      }
    }
  ],
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "DOWNLOAD THE CURRENT DOC 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DOWNLOAD THE CURRENT DOC 1": {
      "main": [
        [
          {
            "node": "UPLOAD FILE TO MISTERAL ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "UPLOAD FILE TO MISTERAL ": {
      "main": [
        [
          {
            "node": "GET SIGNED URL ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET SIGNED URL ": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "EXTRACT THE PAGES 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET THE IMAGE BASE 64 PART": {
      "main": [
        [
          {
            "node": "CONVERT TO BINARY ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CONVERT TO BINARY ": {
      "main": [
        [
          {
            "node": "SAVE ALL THE  IMAGES IN SUPABASE  BUCKET STORAGE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EXTRACT THE PAGES 1": {
      "main": [
        [
          {
            "node": "CHECK IF THERE IS NO IMAGES",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "GET SUPABASE STORAGE FILE TITLE": {
      "main": [
        [
          {
            "node": "GET THE IMAGE BASE 64 PART",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SAVE ALL THE  IMAGES IN SUPABASE  BUCKET STORAGE": {
      "main": [
        [
          {
            "node": "EXTRACT TITLE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EXTRACT TITLE": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain2": {
      "main": [
        [
          {
            "node": "GET SUPABASE STORAGE FILE TITLE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Split Out3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out3": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Name Consistency",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CHECK IF THERE IS NO IMAGES": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IMAGES": {
      "main": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          },
          {
            "node": "IMAGES",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "Split Out2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out2": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "DOC_ID": "1wHLjtFGpokJEk74O2rZZPlT5YCenjsWH"
      }
    ]
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "764abf43019c66c51279befb0403092fc7e1beab1eff90fa2cd5f93d91d18c8a"
  }
}
